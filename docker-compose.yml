services:
  postgres:
    container_name: postgres
    image: postgres:10
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ostock_dev
      PGDATA: /data/postgres
    volumes:
      - c:/tmp/postgres_ostock:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - ostock-network
    restart: unless-stopped


  configserver:
    container_name: configserver
    image: config-server:1.0
    ports:
      - "8071:8071"
    environment:
      ENCRYPT_KEY: "IMSYMMETRIC"
#      EUREKA_HOST: "eureka"
    networks:
      - ostock-network

  eurekaserver:
    container_name: eurekaserver
    image: eureka:1.0
    ports:
      - "8070:8070"
    environment:
      CONGIG_SERVER_HOST: configserver
      EUREKA_HOST: "eurekaserver"
    depends_on:
      - configserver
    networks:
      - ostock-network


  authorization-server:
    container_name: authorization-server
    image: auth-server:1.0
    ports:
      - "9999:9999"
    environment:
      SPRING_PROFILES_ACTIVE: "dockerdev"
      CONGIG_SERVER_HOST: configserver
      ENCRYPT_KEY: "IMSYMMETRIC"
      EUREKA_HOST: eurekaserver
    depends_on:
      - postgres
      - configserver
      - eurekaserver
    networks:
      - ostock-network
    restart: unless-stopped


  license-service:
    container_name: license-service
    image: license-service:1.0
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: "dockerdev"
      CONGIG_SERVER_HOST: configserver
      ENCRYPT_KEY: "IMSYMMETRIC"
      EUREKA_HOST: eurekaserver
    depends_on:
      - postgres
      - configserver
      - eurekaserver
    networks:
      - ostock-network
    restart: unless-stopped

  organization-service:
    container_name: organization-service
    image: organization-service:1.0
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: "dockerdev"
      CONGIG_SERVER_HOST: configserver
      ENCRYPT_KEY: "IMSYMMETRIC"
      EUREKA_HOST: eurekaserver
    depends_on:
      - postgres
      - configserver
      - eurekaserver
    networks:
      - ostock-network
    restart: unless-stopped

  license-service-2:
    container_name: license-service-2
    image: license-service:1.0
    ports:
      - "8082:8080"
    environment:
      SPRING_PROFILES_ACTIVE: "dockerdev"
      CONGIG_SERVER_HOST: configserver
      ENCRYPT_KEY: "IMSYMMETRIC"
      EUREKA_HOST: eurekaserver
    depends_on:
      - postgres
      - configserver
      - eurekaserver
    networks:
      - ostock-network
    restart: unless-stopped


  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - 2181:2181
    networks:
      backend:
        aliases:
          - "zookeeper"
  kafkaserver:
    image: wurstmeister/kafka:latest
    ports:
      - 9092:9092
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=localhost
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS=dresses:1:1,ratings:1:1
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - zookeeper
    networks:
      backend:
        aliases:
          - "kafka"
  redisserver:
    image: redis:alpine
    ports:
      - 6379:6379
    networks:
      backend:
        aliases:
          - "redis"


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
    container_name: elasticsearch
    volumes:
      - c:/tmp/elasticsearch:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
#      - node.name=node-1
#      - cluster.initial_master_nodes=node-1
    ports:
      - 9300:9300
      - 9200:9200
  kibana:
    image: docker.elastic.co/kibana/kibana:7.7.0
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: "http://elasticsearch:9300"
    ports:
      - 5601:5601
    depends_on: [elasticsearch]
#  logstash:
#    image: docker.elastic.co/logstash/logstash:7.7.0
#    container_name: logstash
#    volumes:
#      - c:/tmp/logstash/vol/logstash.conf:/etc/logstash/conf.d/logstash.conf:ro
##    command:
##      logstash -f c:/tmp/logstash/logstash.conf
#    ports:
#      - 5000:5000

  logstash:
    image: docker.elastic.co/logstash/logstash:7.7.1
    volumes:
      - c:/tmp/logstash/vol/logstash.conf:/etc/logstash/logstash.conf:ro
    command:
      logstash -f /etc/logstash/logstash.conf
    ports:
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
      SERVER_NAME: metric.logstash
    depends_on:
      - elasticsearch

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    depends_on:
      - elasticsearch
    environment:
      - STORAGE_TYPE=elasticsearch
      - "ES_HOSTS=elasticsearch:9300"
    ports:
      - 9411:9411
    networks:
      backend:
        aliases:
          - "zipkin"

networks:
  ostock-network:
  backend:
volumes:
  postgres:
  elasticsearch:
  logstash: